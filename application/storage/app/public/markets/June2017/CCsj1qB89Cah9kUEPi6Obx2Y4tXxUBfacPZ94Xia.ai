%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 11.0.0
%%For: (2) (2)
%%Title: (snee.eps)
%%CreationDate: 10/30/2011 12:53 AM
%%BoundingBox: 48 171 548 671
%%HiResBoundingBox: 48.2554 171.6514 547.0391 670.2378
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%RGBProcessColor: 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 3 () 
%AI3_TemplateBox: 297 421 297 421
%AI3_TileBox: 5.3999 42.54 588.5999 805.98
%AI3_DocumentPreview: Header
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 2
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -523.5 876.5 1 1658 926 26 0 0 11 83 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRider
currentpacking true setpacking
setpacking
%AI3_EndRider
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (\317\353\340\343\350\355 \317\345\360\345\365\356\344) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (\321\356\361\362\340\342\355\340\377 \364\356\360\354\340 Adobe) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI5_End_NonPrinting--
2 Bn
%AI5_BeginGradient: (GradientFill 1)
(GradientFill 1) 0 3 Bd
[
<
0A090807060403020100
>
<
06050504030302010100
>
<
05050404030201010000
>
0
<
F5F6F7F8F9FBFCFDFEFF
>
<
F6F7F8F9FAFBFCFDFEFF
>
<
F5F6F7F8F9FBFCFDFEFF
>
4 %_Br
<
171615141312100F0E0D0C0B0A
>
<
0A090909090808080707070706
>
<
0A0A0909080807080706060605
>
0
<
E8E9EAEBECEDEFF0F1F2F3F4F5
>
<
EFF0F0F1F1F2F3F3F4F4F5F5F6
>
<
ECEDEEEEEFF0F1F1F2F3F4F4F5
>
4 %_Br
[
0 0 0 0 1 1 1 2 50 100 %_BS
%_0 0 0 0 1 1 1 2 50 100 Bs
0.0392 0.0235 0.0196 0 0.9608 0.9647 0.9608 2 50 75 %_BS
%_0.0392 0.0235 0.0196 0 0.9608 0.9647 0.9608 2 50 75 Bs
0.0902 0.0392 0.0392 0 0.9098 0.9373 0.9255 2 50 0 %_BS
%_0.0902 0.0392 0.0392 0 0.9098 0.9373 0.9255 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (GradientFill 2)
(GradientFill 2) 1 3 Bd
[
<
0001020304060708090A
>
<
00010102030304050506
>
<
00000101020304040505
>
0
<
FFFEFDFCFBF9F8F7F6F5
>
<
FFFEFDFCFBFAF9F8F7F6
>
<
FFFEFDFCFBF9F8F7F6F5
>
4 %_Br
<
0A0B0C0D0E0F10121314151617
>
<
0607070707080808090909090A
>
<
05060606070807080809090A0A
>
0
<
F5F4F3F2F1F0EFEDECEBEAE9E8
>
<
F6F5F5F4F4F3F3F2F1F1F0F0EF
>
<
F5F4F4F3F2F1F1F0EFEEEEEDEC
>
4 %_Br
[
0 0 0 0 1 1 1 2 50 0 %_BS
%_0 0 0 0 1 1 1 2 50 0 Bs
0.0392 0.0235 0.0196 0 0.9608 0.9647 0.9608 2 50 83 %_BS
%_0.0392 0.0235 0.0196 0 0.9608 0.9647 0.9608 2 50 83 Bs
0.0902 0.0392 0.0392 0 0.9098 0.9373 0.9255 2 50 100 %_BS
%_0.0902 0.0392 0.0392 0 0.9098 0.9373 0.9255 2 50 100 Bs
BD
%AI5_EndGradient
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0 0 0 1 ([Registration]) 0 Xs
([Registration]) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 -1 31 26 23 0 100 Lb
(\321\353\356\351 1) Ln
0 A
0 O
0.9569 0.4314 0.0314 0.0078 0.0275 0.3608 0.6588 Xa
0 J 0 j 1 w 4 M []0 d1 XR
48.3447 433.3271 m
546.9307 433.3271 L
546.9307 670.2378 L
48.3447 670.2378 L
48.3447 433.3271 L
f
0.0078 0.1961 0.9373 0 1 0.8 0 Xa
497.1172 652.7939 m
520.1699 642.625 530.6201 615.6807 520.4502 592.627 c
510.2813 569.5737 483.3359 559.124 460.2832 569.293 c
454.5928 571.8037 449.6709 575.3379 445.6367 579.582 C
465.6855 574.3105 487.166 584.2256 495.7988 603.7959 c
504.2988 623.0669 497.4883 645.2271 480.6543 656.6445 C
486.1797 656.4097 491.7529 655.1606 497.1172 652.7939 c
f
*u
0.102 0.0275 0.0196 0 0.8824 0.949 1 Xa
0 R
0 0 0 0 1 1 1 XA
0.216 w 22.9256 M401.7188 514.4653 m
193.2056 514.4653 l
165.752 514.4653 137.6533 509.1348 109.7373 503.0605 C
142.106 496.1748 174.9873 490.2764 208.1992 486.2461 C
248.0347 481.4131 292.751 485.0054 335.6348 484.8921 C
357.1787 495.5415 379.1328 505.6055 401.7188 514.4653 C
401.7188 514.4653 L
b
1 D
235.4688 432.3887 m
138.7827 406.8574 L
158.9863 395.2373 L
184.6704 406.2656 210.0293 419.0205 235.4688 432.3887 C
b
*U
0 D
0.0902 0.0353 0.0235 0 0.898 0.9412 0.9765 Xa
408.8887 478.1841 m
347.748 492.2729 271.7603 478.5342 208.1992 486.2461 C
153.7686 492.8501 100.2271 504.4736 48.373 517.2373 C
48.373 489.126 L
84.0181 467.8862 216.751 441.8647 237.0337 439.5991 C
240.479 439.2144 243.9922 438.9502 247.5576 438.7793 C
243.5239 436.6367 239.4946 434.5049 235.4663 432.3877 C
408.8887 478.1841 L
b
0.0549 0.0235 0.0196 0 0.9373 0.9608 0.9765 Xa
247.5576 438.7793 m
243.9922 438.9502 240.479 439.2144 237.0337 439.5991 C
216.751 441.8647 84.0181 467.8862 48.373 489.126 C
48.373 362.3037 L
118.3545 372.3955 182.479 404.2129 247.5576 438.7793 C
b
546.9307 491.1563 m
502.5801 503.6313 458.4648 514.8433 407.6787 520.3687 C
262.021 536.2153 166.9624 388.7002 48.3633 362.3037 C
48.3633 280.8281 L
117.9507 321.3809 187.9932 289.458 252.8647 297.21 c
320.6475 305.3086 487.8604 402.1963 546.9307 432.7549 C
546.9307 491.1563 L
Bb
1 (GradientFill 1) 384.4541 181.4893 113 479.9622 1 0 0 1 0 0 Bg
-187.5362 441.8076 501.7815 212.9936 133.5625 74.9922 Xm
-3181.7419 7495.7134 501.7815 212.9936 3315.3047 -7420.7217 Bc
-140.6521 331.3557 501.7815 212.9936 133.5625 74.9922 Bm
-46.884 110.4519 501.7815 212.9936 -7.0898 406.3477 Bm
-3181.7419 7495.7134 501.7815 212.9936 -53.9736 516.7998 Bc
b
2 BB
48.3633 280.8281 m
48.3633 171.6514 L
126.6958 171.6514 L
546.9307 171.6514 L
546.9307 423.2681 L
546.9307 432.7549 L
487.8604 402.1963 320.6475 305.3086 252.8647 297.21 c
187.9932 289.458 117.9507 321.3809 48.3633 280.8281 C
Bb
0 0 0 0 Bh
1 (GradientFill 2) 252.7754 336.1465 0 273.0349 1 0 0 1 0 0 Bg
273.0349 0 0 -273.0349 252.7754 336.1465 Bm
f
0 BB
0.1882 0.1294 0.102 0.0118 0.8 0.8 0.8 Xa
117.7095 186.9961 m
124.6211 183.5742 269.2012 173.0313 310.8721 191.0039 C
360.1895 212.2734 61.4746 214.832 117.7095 186.9961 C
f
u
0.0196 0.0118 0.0078 0 0.9804 0.9804 0.9804 Xa
196.7622 195.1299 m
236.2544 170.0918 317.79 184.1621 347.5527 224.2217 C
379.4658 267.1738 360.1572 342.5166 313.1816 363.5625 C
204.793 412.123 95.0713 259.6055 196.7622 195.1299 C
f
210.002 464.2998 m
259.0439 501.1177 367.4229 435.1123 306.5674 368.418 C
234.4673 289.3994 129.9775 398.1934 210.002 464.2998 C
f
0.102 0.0667 0.051 0.0039 0.8941 0.8941 0.8941 Xa
182.5093 211.6992 m
214.6294 180.083 294.3062 176.7695 330.4873 208.4648 C
334.8027 212.2451 338.5986 216.5332 341.8887 221.207 C
304.7031 214.293 261.3838 219.957 240.3589 237.3496 C
198.5269 271.957 216.6646 317.7559 256.2759 345.5732 C
256.2339 345.5557 L
240.0674 342.7051 L
221.8594 346.9365 L
210.9004 351.2178 L
160.9683 322.7627 133.2788 260.1592 182.5093 211.6992 C
f
0.6235 0.4745 0.9922 0.4627 0.2 0.2 0 Xa
191.9644 448.7778 m
199.6626 460.085 211.6611 467.624 225.3701 471.6548 C
227.6465 470.6924 L
213.5532 466.8843 201.1597 459.3691 193.3223 447.8608 C
138.2993 358.3926 273.9292 288.3682 317.1416 387.6123 C
336.9404 433.0752 309.0537 462.0391 273.8369 470.8232 C
275.6855 471.9111 L
311.0557 462.5229 338.6064 433.063 318.6133 387.1504 C
274.4116 285.6406 135.6816 357.2637 191.9644 448.7778 C
f
179.8198 205.4678 m
215.2432 172.3652 301.0205 171.0254 339.0449 206.1201 C
379.8164 243.748 374.6279 324.2217 330.8115 354.6953 C
320.5361 361.8418 309.8467 366.8711 299.0313 370.0537 C
297.21 368.0645 L
308.0586 364.9785 318.7832 360.002 329.082 352.8398 C
371.8496 323.0967 376.9141 244.5508 337.1172 207.8232 C
300.0049 173.5684 216.2808 174.875 181.7061 207.1846 C
129.6689 255.8115 155.1079 320.7773 204.9272 352.6768 C
202.8984 354.0742 L
152.3276 321.2285 126.7559 255.0566 179.8198 205.4678 C
f
302.0938 487.4839 m
320.9453 486.3228 323.1445 455.5537 310.7188 445.1997 C
282.7363 423.249 171.8633 407.501 190.585 472.3906 C
202.4072 494.0957 205.8164 477.2842 220.626 467.3813 C
243.0781 455.6899 290.9263 465.9985 302.0938 487.4839 C
f
0.098 0.0667 0.051 0.0039 0.898 0.898 0.898 Xa
301.3613 480.3232 m
317.0283 480.3999 319.1963 455.6807 309.4795 446.4277 C
288.3872 427.0542 183.2734 411.1338 193.3584 465.5771 C
192.8027 483.9175 213.519 465.7632 231.2905 458.1846 C
250.8262 449.8535 294.3345 462.2988 301.3613 480.3232 C
f
0.6235 0.4745 0.9922 0.4627 0.2 0.2 0 Xa
268.4502 358.665 m
269.1748 360.2393 269.4375 360.9932 268.3804 362.5537 C
267.2124 364.2813 264.9126 366.7432 262.5176 366.5029 C
260.833 366.333 259.9258 365.0361 259.6309 363.5674 C
259.3115 361.9668 259.7319 359.3848 260.2891 358.2285 C
261.396 355.9316 267.416 356.416 268.4502 358.665 C
f
287.0112 481.2031 m
305.0225 475.1992 278.3838 435.5986 269.5532 429.9575 C
251.5962 418.4854 234.3877 409.4629 224.5034 389.6934 C
221.7534 384.1953 246.3989 390.5381 253.2231 390.5381 C
267.3369 390.5381 273.8496 387.832 280.2529 377.5859 C
280.6211 376.998 281.9502 378.7197 282.5059 379.2754 C
294.7451 391.5146 311.4824 476.729 294.4072 485.8643 C
293.9551 486.1055 293.2539 486.8652 292.979 486.4268 C
292.8872 486.2822 287.5249 481.3403 287.0112 481.2031 C
f
0.098 0.0667 0.051 0.0039 0.898 0.898 0.898 Xa
244.5879 403.3467 m
241.7285 399.8799 260.6025 403.9668 265.5918 403.9668 C
275.917 403.9668 280.6802 401.9893 285.3643 394.4932 C
285.6333 394.0635 286.6157 395.3135 287.0117 395.7275 C
295.3965 404.5371 304.335 472.9277 294.6353 480.3027 C
294.5811 480.3438 295.5884 473.7632 295.519 473.8125 C
298.3447 437.8389 263.3315 426.0688 244.5879 403.3467 C
f
0.0196 0.0118 0.0078 0 0.9804 0.9804 0.9804 Xa
197.1758 538.1772 m
203.2349 568.4126 318.2744 595.5161 309.8828 511.165 C
302.3066 435.0122 162.6401 447.5234 197.1758 538.1772 C
f
*u
0.6235 0.4745 0.9922 0.4627 0.2 0.2 0 Xa
198.5044 545.6489 m
208.2642 575.8164 328.9648 589.9233 310.4375 504.7554 C
293.7153 427.8677 152.5332 457.1274 198.5044 545.6489 C
198.5044 545.6489 L
f
1 D
199.8833 544.8413 m
199.8833 544.8413 L
155.1245 458.6558 292.5815 430.1685 308.8633 505.0269 C
326.8994 587.9468 209.3843 574.2129 199.8833 544.8413 C
f
*U
0 D
269.9692 521.7412 m
267.7427 517.7188 263.2407 517.605 261.2881 521.2002 C
254.1997 534.2495 276.709 533.9121 269.9692 521.7412 C
f
246.9331 519.6602 m
244.4917 515.251 239.5547 515.1255 237.4146 519.0674 C
229.6421 533.3745 254.3208 533.0049 246.9331 519.6602 C
f
0 0 0 0 1 1 1 Xa
245.2017 521.2051 m
244.3345 519.6367 242.5786 519.5928 241.8179 520.9946 C
239.0552 526.0811 247.8281 525.9492 245.2017 521.2051 C
f
265.4868 522.1587 m
264.6191 520.5913 262.8647 520.5469 262.103 521.9482 C
259.3398 527.0347 268.1143 526.9033 265.4868 522.1587 C
f
0.6235 0.4745 0.9922 0.4627 0.2 0.2 0 Xa
240.2822 535.0039 m
242.3667 535.1934 240.2446 532.8271 239.5229 532.1548 C
238.145 530.8721 234.8398 528.8311 232.8848 528.8311 C
229.6685 528.8311 236.6519 534.6733 240.2822 535.0039 C
f
264.7549 536.2646 m
262.6689 536.4541 264.791 534.0879 265.5127 533.4155 C
266.8906 532.1323 270.1958 530.0918 272.1523 530.0918 C
275.3672 530.0918 268.3843 535.9336 264.7549 536.2646 C
f
0.0078 0.1961 0.9373 0 1 0.8 0 Xa
302.627 523.1064 m
307.7227 521.9546 293.6147 508.9136 291.9551 507.2407 C
289.6699 504.937 286.2642 506.3262 285.8525 504.5068 C
285.3213 502.1543 283.0166 498.751 280.564 499.3062 C
275.395 500.4746 279.2813 498.6826 275.8149 496.4956 C
273.6021 495.0986 271.5664 494.4023 269.355 495.2139 C
268.8691 495.3921 264.6895 487.8135 258.8408 489.1377 C
249.7173 491.2012 244.5293 497.5938 246.4541 506.106 C
247.1421 509.1465 249.1445 511.7266 250.209 514.6255 C
251.9287 519.3105 257.7334 517.9512 262.1602 516.9492 C
265.6221 516.167 263.3599 514.3525 266.3403 516.2334 C
270.9937 519.1694 278.6616 515.707 284.2588 517.6646 C
287.3682 518.7524 291.2148 517.9541 294.3721 519.9473 C
295.5283 520.6768 296.4004 521.6001 297.6689 522.4004 C
299.0254 523.2573 302.7471 522.623 302.627 523.1064 C
f
*u
0.6235 0.4745 0.9922 0.4627 0.2 0.2 0 Xa
303.3574 524.1592 m
308.6563 523.0444 294.2441 509.3105 292.5518 507.5508 C
290.2202 505.1289 286.6694 506.5171 286.2729 504.624 C
285.7563 502.1763 283.4243 498.6128 280.876 499.1514 C
275.4995 500.2822 279.5537 498.4873 275.998 496.1641 C
273.7271 494.6836 271.627 493.9287 269.3252 494.7368 C
268.8208 494.9141 264.6089 486.9971 258.5264 488.2759 C
249.0435 490.27 243.5679 496.8096 245.4282 505.6611 C
246.0908 508.8198 248.1265 511.5273 249.1865 514.5469 C
250.8926 519.4277 256.9272 518.1099 261.5308 517.1406 C
262.855 516.8633 263.3784 516.4287 263.6636 516.0894 C
263.3379 516.3071 262.8501 516.5239 262.0796 516.686 C
257.665 517.6143 251.8794 518.8774 250.2432 514.1973 C
249.2261 511.3013 247.2749 508.7056 246.6396 505.6772 C
244.8545 497.1885 250.1055 490.9185 259.1987 489.0059 C
265.0322 487.7798 269.0698 495.3711 269.5552 495.2017 C
271.7612 494.4272 273.7744 495.1504 275.9531 496.5703 C
279.3628 498.7974 275.4746 500.5195 280.6304 499.4341 C
283.0732 498.9189 285.3101 502.3359 285.8047 504.6821 C
286.1855 506.4976 289.5903 505.1665 291.8262 507.4888 C
293.4492 509.1758 307.2695 522.3452 302.1885 523.415 C
302.3154 522.9346 298.6094 523.5093 297.2734 522.6392 C
297.1382 522.5488 L
297.4785 522.8213 297.8359 523.0908 298.2324 523.3501 C
299.625 524.2578 303.4893 523.6587 303.3574 524.1592 C
303.3574 524.1592 L
f
1 D
264.1973 515.5864 m
264.1973 515.5864 L
264.5781 515.0908 264.4922 514.896 266.2422 516.0361 C
270.8218 519.0254 278.4912 515.7012 284.0234 517.7295 C
287.0952 518.8555 290.9297 518.123 294.0371 520.1514 C
294.3481 520.354 294.6387 520.5723 294.9219 520.7979 C
294.8579 520.7559 L
291.6162 518.6406 287.6172 519.4048 284.4141 518.23 C
278.6455 516.1157 270.647 519.5815 265.8716 516.4644 C
264.8657 515.8091 264.4429 515.5767 264.1973 515.5864 C
f
*U
*u
0 D
234.707 553.4399 m
240.4648 550.1851 246.1826 546.9092 252.1953 544.3003 C
273.9014 534.9795 298.6934 528.9785 310.5518 541.27 C
317.3789 551.168 308.4326 559.605 297.5459 560.4072 C
294.252 560.6499 287.7178 559.2837 287.7607 562.5488 C
287.8936 572.6348 290.979 582.749 294.8896 591.9888 C
296.5713 595.9619 303.5811 605.6182 303.1982 608.7832 C
294.5723 623.0249 265.5469 624.1226 260.3584 622.1802 C
271.5313 606.731 289.4102 612.1602 291.5049 609.8779 C
278.4404 605.1182 268.9014 612.1274 259.0039 619.8813 C
247.8643 628.6084 238.2437 630.5527 224.8589 628.9297 C
216.4595 627.9111 210.9565 623.0015 212.0117 614.2983 C
218.0991 584.1895 L
196.5034 581.5708 186.8682 563.1279 201.0171 546.4121 C
215.2061 557.9678 224.0137 559.4849 234.707 553.4399 C
234.707 553.4399 L
f
280.8711 542.5688 m
272.9824 543.9995 270.166 547.3237 264.4858 550.8291 C
257.8511 554.9238 244.3716 569.8501 238.7734 576.3516 C
252.6973 574.8394 265.9243 572.1069 282.7686 574.1494 C
285.7407 574.5093 L
283.9507 558.0469 288.5898 551.1392 266.9067 551.7109 C
268.04 546.1201 279.3374 544.0879 286.3105 544.9336 C
290.8667 545.4858 296.9561 548.4873 293.8311 553.3818 C
304.8359 552.7373 294.5513 538.6685 280.8711 542.5688 C
280.8711 542.5688 L
f
204.5645 564.1646 m
200.4077 576.9478 222.8408 585.3618 228.7461 576.1406 C
216.6748 576.6387 212.5942 572.7432 204.5645 564.1646 C
204.5645 564.1646 L
f
222.3369 616.5649 m
222.0098 618.1484 225.1216 614.7778 226.1841 614.8184 C
231.7324 583.8496 L
228.5449 586.1816 L
222.3369 616.5649 L
f
*U
*u
0 0 0 0 1 1 1 Xa
280.9204 542.4556 m
273.0303 543.8867 270.2148 547.2075 264.5356 550.7148 C
257.9004 554.8101 244.4199 569.7373 238.8228 576.2378 C
252.748 574.7251 265.9741 571.9922 282.8184 574.0347 C
285.7891 574.3945 L
283.9995 557.9321 288.6387 551.0259 266.9565 551.5962 C
268.0903 546.0059 279.3867 543.9751 286.3608 544.8203 C
290.9155 545.3726 297.0049 548.3745 293.8809 553.2686 C
304.8857 552.624 294.6001 538.5542 280.9204 542.4556 C
280.9204 542.4556 L
f
204.6143 564.0503 m
200.4561 576.8345 222.8911 585.248 228.7974 576.0278 C
216.7236 576.5239 212.6431 572.6294 204.6143 564.0503 C
204.6143 564.0503 L
f
1 D
222.3867 616.4517 m
228.5947 586.0679 L
231.7827 583.7358 L
226.2339 614.707 L
225.1724 614.6655 222.0581 618.0347 222.3867 616.4517 C
f
*U
0 D
0.6235 0.4745 0.9922 0.4627 0.2 0.2 0 Xa
229.5537 493.7158 m
230.9907 494.0195 232.4136 493.0464 232.731 491.543 c
233.0488 490.0396 232.1406 488.5742 230.7036 488.271 c
229.2666 487.9673 227.8438 488.9404 227.5264 490.4434 c
227.209 491.9468 228.1167 493.4121 229.5537 493.7158 c
f
236.5718 488.6602 m
234.7666 488.2788 233.6128 486.5063 233.9941 484.7017 c
234.375 482.897 236.1475 481.7427 237.9521 482.124 c
239.7568 482.5054 240.9111 484.2778 240.5303 486.0825 c
240.1484 487.8872 238.376 489.0415 236.5718 488.6602 c
f
245.687 484.6548 m
243.1992 484.1289 241.6074 481.6851 242.1333 479.1973 c
242.6592 476.709 245.1025 475.1177 247.5908 475.6431 c
250.0786 476.1689 251.6699 478.6128 251.145 481.1006 c
250.6191 483.5884 248.1753 485.1797 245.687 484.6548 c
f
257.9067 483.0342 m
254.9937 482.4189 253.1304 479.5571 253.7461 476.6445 c
254.3613 473.731 257.2222 471.8677 260.1353 472.4829 c
263.0483 473.0986 264.9116 475.96 264.2964 478.873 c
263.6812 481.7861 260.8198 483.6489 257.9067 483.0342 c
f
270.4497 485.5122 m
267.9614 484.9868 266.3701 482.543 266.8955 480.0547 c
267.4214 477.5664 269.8652 475.9756 272.353 476.501 c
274.8408 477.0264 276.4326 479.4702 275.9072 481.9585 c
275.3818 484.4463 272.9375 486.0376 270.4497 485.5122 c
f
279.8647 489.6455 m
278.0601 489.2642 276.9063 487.4917 277.2871 485.687 c
277.668 483.8823 279.4409 482.7285 281.2456 483.1094 c
283.0498 483.4902 284.2041 485.2632 283.8232 487.0679 c
283.4419 488.8721 281.6694 490.0264 279.8647 489.6455 c
f
286.6924 493.2036 m
287.8887 493.4561 289.0728 492.6465 289.3369 491.3955 c
289.6011 490.1445 288.8457 488.9243 287.6494 488.6719 c
286.4536 488.4194 285.2695 489.229 285.0054 490.4805 c
284.7412 491.7314 285.4966 492.9507 286.6924 493.2036 c
f
U
97.5874 451.6455 m
410.291 486.7964 L
427.6494 332.373 L
114.9458 297.2227 L
97.5874 451.6455 L
f
0 0 0 0 1 1 1 Xa
98.6313 450.396 m
409.0762 485.4731 L
421.0107 333.4355 L
115.4868 298.7607 L
98.6313 450.396 L
f
0.6235 0.4745 0.9922 0.4627 0.2 0.2 0 Xa
111.0396 402.5742 m
108.3936 402.4941 106.0283 400.5098 104.2437 397.2813 C
103.6665 397.1416 103.1099 396.8887 102.5781 396.5361 C
102.3076 396.585 102.0337 396.6064 101.7578 396.5977 C
97.499 396.4678 94.2563 389.417 94.5171 380.8516 C
94.7056 374.6553 96.6768 369.3633 99.3643 366.958 C
99.6904 366.5039 100.0317 366.0957 100.3877 365.7402 C
101.2676 364.3369 102.27 363.2422 103.3516 362.543 C
104.3828 361.5596 105.5107 360.9473 106.6885 360.7959 C
107.4541 360.3066 108.2573 360.0068 109.083 359.9248 C
110.1289 359.3066 111.2324 358.9883 112.3657 359.0225 C
118.3452 359.2051 122.897 369.1035 122.5313 381.1289 C
122.165 393.1533 117.0195 402.7568 111.0396 402.5742 c
f
417.6953 446.8018 m
414.9814 446.6475 412.6064 444.5474 410.8623 441.1841 C
410.2734 441.0249 409.709 440.751 409.1719 440.374 C
408.8936 440.417 408.6113 440.4316 408.3291 440.4155 C
403.96 440.167 400.8213 432.8413 401.3203 424.0552 C
401.6816 417.7002 403.8477 412.3203 406.6719 409.9238 C
407.0176 409.4668 407.3799 409.0576 407.7549 408.7012 C
408.6953 407.2852 409.7549 406.1885 410.8838 405.5 C
411.9688 404.5186 413.1436 403.9199 414.3564 403.7959 C
415.1553 403.3145 415.9883 403.0283 416.8379 402.9668 C
417.9287 402.3594 419.0693 402.0635 420.2324 402.1299 C
426.3652 402.4775 430.7715 412.7627 430.0703 425.0962 C
429.3701 437.4302 423.8291 447.1499 417.6953 446.8018 c
f
0 XR
158.3184 392.502 m
160.709 381.4873 L
159.8379 381.2959 L
159.0967 383.3516 158.229 384.9238 157.2271 386.0205 c
156.2251 387.1094 154.9751 387.8809 153.4688 388.3252 c
151.9624 388.7695 150.4946 388.8359 149.0493 388.5254 c
147.4229 388.166 146.1875 387.3789 145.335 386.1543 c
144.4907 384.9287 144.2036 383.6836 144.4746 382.4189 c
144.6899 381.4502 145.2178 380.6348 146.0586 379.9814 c
147.2827 379.0225 149.9331 377.9551 154.0024 376.7891 c
157.3262 375.8408 159.6182 375.0557 160.8936 374.4326 c
162.1689 373.8174 163.2217 372.999 164.0601 371.9678 c
164.8984 370.9375 165.457 369.7852 165.728 368.5127 c
166.2539 366.1055 165.772 363.8291 164.2739 361.6729 c
162.7837 359.5254 160.5684 358.1289 157.6279 357.4912 c
156.6997 357.292 155.813 357.1748 154.9761 357.1387 c
154.4673 357.1094 153.4019 357.1816 151.7705 357.3398 c
150.1392 357.5059 149.1143 357.5371 148.7119 357.4492 c
148.3174 357.3701 148.0376 357.1836 147.855 356.8975 c
147.6812 356.6113 147.6206 356.0947 147.6729 355.332 C
146.8022 355.1406 L
144.436 366.0645 L
145.3066 366.248 L
146.2026 364.0518 147.1196 362.4629 148.0566 361.4727 c
148.9937 360.4902 150.2524 359.7773 151.8325 359.333 c
153.4126 358.8877 155.0444 358.8525 156.7363 359.2197 c
158.6909 359.6416 160.1235 360.4941 161.0342 361.7676 c
161.9448 363.0488 162.2485 364.3926 161.9458 365.8057 c
161.7705 366.585 161.3896 367.3262 160.7788 368.0361 c
160.1763 368.7363 159.3521 369.3408 158.2886 369.8311 c
157.5771 370.1641 155.6948 370.7988 152.6416 371.7373 c
149.5879 372.6758 147.3867 373.4688 146.0376 374.125 c
144.6963 374.79 143.6025 375.6006 142.7725 376.5654 c
141.9419 377.5303 141.3833 378.6748 141.0962 379.9883 c
140.6021 382.2715 141.0508 384.4336 142.4414 386.459 c
143.8408 388.4932 145.8911 389.8008 148.5933 390.3906 c
150.2856 390.7568 152.1719 390.7285 154.2441 390.3135 c
155.2026 390.1104 155.8667 390.0488 156.228 390.1279 c
156.6304 390.2158 156.9355 390.4102 157.1421 390.7051 c
157.3491 391.0068 157.4512 391.5391 157.4478 392.3105 C
158.3184 392.502 L
f
*u
183.0547 367.21 m
181.2197 365.0234 180.0469 363.7354 179.5439 363.3525 c
178.7778 362.7754 177.9224 362.3867 176.9697 362.1797 c
175.4829 361.8525 174.1475 362.0996 172.9634 362.9023 c
171.7788 363.7139 171.0078 364.9492 170.6489 366.6084 c
170.418 367.6592 170.457 368.6191 170.7661 369.4863 c
171.1753 370.6895 172.0693 371.9307 173.4556 373.2178 c
174.8413 374.4961 177.2393 376.2119 180.6406 378.3633 C
180.457 379.2012 l
179.9868 381.3535 179.3311 382.7441 178.4741 383.3975 c
177.6255 384.0508 176.5439 384.2295 175.2461 383.9512 c
174.2603 383.7363 173.5361 383.2979 173.0723 382.6445 c
172.5923 381.9834 172.4243 381.3115 172.5757 380.6211 c
172.9199 379.2666 l
173.0708 378.5518 173.0098 377.9531 172.728 377.4795 c
172.4463 377.0137 172.0093 376.7129 171.4097 376.5771 c
170.835 376.458 170.3188 376.5596 169.8618 376.8818 c
169.4043 377.2129 169.0962 377.7236 168.9448 378.4307 c
168.6577 379.7773 169.0767 381.1602 170.2095 382.5889 c
171.3423 384.0166 173.1533 384.998 175.6416 385.54 c
177.5474 385.9453 179.188 385.9678 180.5469 385.5908 c
181.5708 385.3047 182.4199 384.6924 183.0781 383.7539 c
183.5088 383.1436 183.9512 381.7959 184.3975 379.7178 c
185.9829 372.416 l
186.4292 370.3623 186.7412 369.1143 186.9189 368.6699 c
187.0967 368.2256 187.2915 367.9453 187.5044 367.8301 c
187.7168 367.7129 187.9463 367.6787 188.1758 367.7266 c
188.4307 367.7832 188.6362 367.8877 188.8013 368.0342 c
189.082 368.3115 189.5952 369.0215 190.3325 370.166 C
190.6191 368.8516 L
189.3716 366.1201 187.9507 364.5791 186.3574 364.2363 c
185.5854 364.0693 184.9219 364.2041 184.3506 364.6348 c
183.7793 365.0732 183.3501 365.9287 183.0547 367.21 C
183.0547 367.21 L
f
1 D
182.728 368.7383 m
180.9512 376.9258 L
178.7847 375.4805 177.4087 374.4805 176.8066 373.9424 c
175.7178 372.9814 174.9902 372.0674 174.6152 371.2012 c
174.249 370.3418 174.1611 369.457 174.3525 368.5693 c
174.5996 367.4355 175.1357 366.5801 175.9688 365.9834 c
176.8091 365.3799 177.6611 365.1777 178.54 365.3682 c
179.7305 365.623 181.124 366.7461 182.728 368.7383 C
f
*U
0 D
195.4375 385.1924 m
196.6553 387.0957 197.3838 388.1982 197.6157 388.4922 c
198.1943 389.2354 198.8545 389.8623 199.5957 390.3662 c
200.3374 390.8779 201.1104 391.2178 201.9072 391.3848 c
203.2544 391.6797 204.4917 391.541 205.6367 390.9678 c
206.7734 390.3945 207.6689 389.4043 208.3242 387.9893 C
209.5278 390.2129 210.6201 391.7393 211.6016 392.5703 c
212.5913 393.4004 213.6689 393.9346 214.8433 394.1895 c
215.9854 394.4365 217.0591 394.3643 218.0737 393.9727 c
219.0884 393.5801 219.9932 392.7705 220.7979 391.5518 c
221.3423 390.7197 221.8174 389.3311 222.2397 387.3926 c
224.2476 378.1436 l
224.5425 376.7969 224.8398 375.8926 225.1572 375.4395 c
225.3848 375.127 225.7358 374.8945 226.2109 374.7441 c
226.6855 374.5938 227.3994 374.6211 228.3604 374.8281 C
228.5435 373.9824 L
217.9316 371.6797 L
217.7485 372.5254 L
218.1919 372.6211 l
219.1123 372.8203 219.7949 373.1611 220.2329 373.6338 c
220.5381 373.96 220.7134 374.418 220.75 375 c
220.7515 375.2793 220.6255 376.043 220.3545 377.2988 c
218.3467 386.5479 l
217.9639 388.2969 217.4873 389.4893 216.9092 390.1162 c
216.0781 390.9834 214.9888 391.2773 213.6421 390.9824 c
212.8125 390.8066 212.0308 390.418 211.2808 389.8164 c
210.5303 389.2217 209.6875 388.2354 208.7437 386.8467 C
208.75 386.5762 L
209.0146 385.582 L
211.2373 375.3232 l
211.5562 373.8447 211.8374 372.9492 212.0815 372.6279 c
212.3252 372.3057 212.7012 372.0664 213.209 371.9229 c
213.7163 371.7803 214.5122 371.8242 215.6133 372.0645 C
215.7964 371.2178 L
204.9214 368.8594 L
204.7383 369.7051 L
205.9292 369.9688 206.7188 370.2832 207.0986 370.6582 c
207.4863 371.041 207.7031 371.5313 207.7559 372.1299 c
207.7739 372.417 207.6475 373.1973 207.3687 374.4785 c
205.3608 383.7266 l
204.9785 385.4844 204.4526 386.6855 203.7681 387.3457 c
202.8633 388.1963 201.7905 388.4902 200.5498 388.2197 c
199.7041 388.0361 198.9224 387.623 198.1885 386.9961 c
197.042 386.0186 196.2075 385.0322 195.6846 384.0176 C
198.186 372.4863 l
198.4971 371.082 198.7866 370.1855 199.0796 369.8066 c
199.3643 369.4277 199.7236 369.1709 200.1494 369.0449 c
200.583 368.9199 201.3789 368.9805 202.5537 369.2354 C
202.7368 368.3887 L
192.1006 366.0781 L
191.917 366.9238 L
192.9111 367.1396 193.5688 367.3975 193.9155 367.6904 c
194.2617 367.9922 194.4854 368.3926 194.5957 368.8916 c
194.6973 369.4004 194.6045 370.3193 194.3179 371.6494 c
192.5327 379.8633 l
192.0229 382.2285 191.6143 383.7402 191.3311 384.3984 c
191.1045 384.8916 190.8608 385.2129 190.583 385.3545 c
190.3052 385.4961 189.9609 385.5313 189.5498 385.4434 c
189.1143 385.3477 188.6128 385.1133 188.061 384.7471 C
187.5244 385.5137 L
193.4307 389.5527 L
194.4414 389.7676 L
195.4375 385.1924 L
f
*u
224.4561 393.6514 m
230.4946 397.7637 L
231.3896 397.9541 L
232.4814 392.9355 L
233.1841 395.0645 234.0063 396.6338 234.9639 397.6367 c
235.9136 398.6396 237.0083 399.2725 238.2485 399.543 c
240.4087 400.0127 242.3906 399.5576 244.1948 398.1768 c
246.415 396.4971 247.8833 393.9941 248.6006 390.6768 c
249.4053 386.9639 249.0073 383.6689 247.4058 380.7842 c
246.0864 378.4141 244.0923 376.9414 241.4312 376.3604 c
240.2729 376.1133 239.2393 376.0615 238.3213 376.208 c
237.6411 376.3018 236.8398 376.6191 235.8999 377.1582 C
237.3179 370.6035 l
237.6367 369.1338 237.9341 368.2207 238.2026 367.8584 c
238.4629 367.4961 238.8467 367.248 239.3462 367.1133 c
239.8374 366.9707 240.6743 367.0303 241.8491 367.2861 C
242.0405 366.415 L
230.7715 363.9766 L
230.5801 364.8398 L
231.1714 364.9668 l
232.0337 365.1416 232.7329 365.4658 233.269 365.9375 c
233.5249 366.1738 233.6992 366.5088 233.7842 366.9268 c
233.8604 367.3447 233.7354 368.3379 233.3926 369.8984 c
228.9868 390.2354 l
228.6836 391.623 228.4268 392.4941 228.2241 392.8486 c
228.0127 393.1943 227.752 393.4336 227.4414 393.5586 c
227.1221 393.6914 226.7363 393.7021 226.2603 393.5986 c
225.8911 393.5195 225.4302 393.3086 224.9028 392.96 C
224.4561 393.6514 L
224.4561 393.6514 L
f
1 D
232.7759 391.5479 m
234.5215 383.5146 l
234.8955 381.7822 235.2168 380.6563 235.4756 380.1387 c
235.8882 379.2744 236.5977 378.5977 237.6035 378.0898 c
238.6089 377.584 239.7568 377.4775 241.0542 377.7568 c
242.623 378.0996 243.7524 378.9775 244.459 380.4092 c
245.3813 382.2813 245.5278 384.667 244.8979 387.5664 c
244.189 390.8516 242.9248 393.2217 241.0967 394.6777 c
239.8315 395.6777 238.5132 396.0303 237.1333 395.7363 c
236.3779 395.5684 235.6782 395.2197 235.0273 394.6914 c
234.5244 394.2842 233.771 393.2393 232.7759 391.5479 C
f
*U
0 D
254.375 414.9902 m
260.5576 386.4648 l
260.853 385.1182 261.1426 384.2471 261.4351 383.8506 c
261.7202 383.4561 262.0952 383.1904 262.5537 383.0488 c
263.0122 382.9141 263.7915 382.959 264.9004 383.2051 C
265.084 382.3594 L
254.5459 380.0723 L
254.3623 380.9189 L
255.3481 381.1338 255.9976 381.376 256.311 381.6611 c
256.6328 381.9375 256.8408 382.3379 256.9424 382.8545 c
257.0439 383.3623 256.9512 384.29 256.6646 385.6201 c
252.4253 405.1523 l
251.8994 407.5752 251.5234 409.0537 251.2891 409.5879 c
251.063 410.123 250.8027 410.4609 250.5161 410.6104 c
250.2305 410.7598 249.8945 410.7949 249.5244 410.7148 c
249.1138 410.6279 248.6284 410.3926 248.0518 410.0029 C
247.4741 410.7363 L
253.3149 414.7598 L
254.375 414.9902 L
f
*u
268.2642 397.1768 m
268.9414 393.9824 270.2632 391.6445 272.2222 390.1719 c
274.1816 388.6992 276.2124 388.1865 278.3315 388.6484 c
279.7358 388.9512 280.8804 389.5996 281.748 390.6035 c
282.624 391.6064 283.2075 393.1201 283.5078 395.1523 C
284.334 394.8359 L
284.4673 392.6201 283.937 390.4668 282.7427 388.3574 c
281.54 386.2578 279.7515 384.9482 277.3696 384.4307 c
274.791 383.873 272.3662 384.3965 270.0884 386.0107 c
267.8101 387.624 266.3086 390.1279 265.5674 393.5195 c
264.7705 397.1992 265.0938 400.2734 266.5361 402.7412 c
267.9712 405.209 270.1138 406.7539 272.9634 407.3672 c
275.3784 407.8926 277.5249 407.5264 279.4199 406.2764 c
281.3149 405.0176 282.5488 403.0654 283.1309 400.4043 C
268.2642 397.1768 L
268.2642 397.1768 L
f
1 D
267.9697 398.541 m
277.9243 400.7002 L
277.5474 402.0635 277.1763 402.9932 276.8018 403.5039 c
276.2168 404.2949 275.4902 404.8574 274.6064 405.1914 c
273.7227 405.5254 272.854 405.5957 272.0078 405.4131 c
270.71 405.1338 269.6636 404.3779 268.8521 403.1445 c
268.0488 401.9111 267.752 400.3789 267.9697 398.541 C
f
*U
0 D
319.4277 427.8071 m
321.3984 420.4209 L
320.5039 420.2217 L
320.0527 421.5044 319.6074 422.3926 319.1914 422.8877 c
318.5078 423.6958 317.7158 424.2256 316.8154 424.4775 c
315.9229 424.729 314.8154 424.7197 313.501 424.4331 c
309.0166 423.4609 L
314.2832 399.1406 l
314.7139 397.1777 315.1904 396.0098 315.7129 395.6133 c
316.4561 395.083 317.4385 394.9541 318.6797 395.2246 c
319.7793 395.4639 L
319.9717 394.5938 L
306.4688 391.6689 L
306.2773 392.5313 L
307.4102 392.7783 l
308.749 393.0732 309.623 393.6836 310.0059 394.624 c
310.2393 395.1963 310.1641 396.3779 309.7822 398.1602 c
304.5078 422.481 L
300.6797 421.6523 l
299.1934 421.3335 298.1572 420.9956 297.5811 420.6382 c
296.832 420.167 296.2612 419.4414 295.8613 418.4678 c
295.4697 417.502 295.3716 416.2813 295.5757 414.8193 C
294.6802 414.6279 L
293.4409 422.1738 L
319.4277 427.8071 L
f
*u
326.6973 410.2754 m
327.374 407.0811 328.6963 404.7432 330.6553 403.2705 c
332.6143 401.7979 334.6445 401.2852 336.7637 401.7471 c
338.168 402.0498 339.3125 402.6982 340.1807 403.7021 c
341.0566 404.7051 341.6396 406.2188 341.9404 408.251 C
342.7666 407.9336 L
342.9004 405.7188 342.3691 403.5654 341.1748 401.4561 c
339.9727 399.3564 338.1836 398.0469 335.8018 397.5293 c
333.2236 396.9717 330.7988 397.4951 328.5205 399.1094 c
326.2422 400.7227 324.7412 403.2266 324 406.6182 c
323.2031 410.2979 323.5264 413.3721 324.9688 415.8398 c
326.4033 418.3076 328.5459 419.8525 331.3965 420.4658 c
333.8105 420.9917 335.957 420.625 337.8525 419.375 c
339.7471 418.1162 340.9814 416.1641 341.5635 413.5029 C
326.6973 410.2754 L
326.6973 410.2754 L
f
1 D
326.4023 411.6396 m
336.3564 413.7988 L
335.9805 415.1621 335.6084 416.0918 335.2344 416.6025 c
334.6494 417.3936 333.9229 417.9561 333.0391 418.29 c
332.1553 418.624 331.2861 418.6943 330.4404 418.5117 c
329.1426 418.2324 328.0957 417.4766 327.2842 416.2432 c
326.4814 415.0098 326.1846 413.4775 326.4023 411.6396 C
f
*U
0 D
341.7725 422.1875 m
351.8916 424.3789 L
352.083 423.5083 L
351.4336 423.373 351.0146 423.1626 350.7988 422.8848 c
350.5928 422.6157 350.5254 422.2964 350.6045 421.9346 c
350.6846 421.5566 351.083 421.0381 351.7998 420.377 c
352.0283 420.1621 352.3711 419.832 352.8271 419.3701 c
354.8809 417.2568 L
356.1133 420.0869 l
356.9033 421.8784 357.2549 422.9751 357.167 423.3857 c
357.0957 423.7144 356.9082 423.9614 356.5898 424.1274 c
356.2705 424.3018 355.8203 424.3213 355.2285 424.1938 C
355.0371 425.064 L
362.3145 426.6421 L
362.5059 425.7715 L
361.749 425.5547 361.124 425.1982 360.6455 424.7007 c
359.9922 424.0073 359.1963 422.6182 358.248 420.5488 c
356.1689 415.9854 L
363.1895 409.4531 l
364.918 407.8428 366.1006 406.9082 366.7471 406.6416 c
367.3936 406.3828 368.1729 406.3291 369.0762 406.4707 C
369.2588 405.625 L
359.1152 403.4258 L
358.9316 404.2715 L
359.6299 404.4229 360.1484 404.6992 360.4707 405.0986 c
360.7188 405.3838 360.8027 405.7031 360.7314 406.0645 c
360.6523 406.4258 359.9512 407.2256 358.6387 408.4648 c
354.4893 412.3789 L
352.0352 407.0303 l
351.2861 405.3779 350.9355 404.4131 350.9922 404.1504 c
351.0713 403.7725 351.3232 403.4756 351.7402 403.2432 c
352.1572 403.0107 352.7227 402.958 353.4375 403.085 C
353.6201 402.2393 L
346.5977 400.7168 L
346.415 401.5625 L
346.9658 401.7559 347.4102 402.0654 347.7656 402.4648 c
348.2617 403.0518 349.0166 404.4248 350.0225 406.5928 c
353.2246 413.5605 L
347.8604 418.5898 l
346.3359 420.0264 345.209 420.8945 344.4805 421.1865 c
343.7529 421.478 342.917 421.5244 341.9639 421.3174 C
341.7725 422.1875 L
f
371.3652 436.1797 m
372.8955 429.1079 L
377.9219 430.1997 L
378.2725 428.5571 L
373.2539 427.4653 L
376.2734 413.5186 l
376.5762 412.1309 376.9805 411.2344 377.4863 410.8291 c
377.9922 410.4326 378.5576 410.3057 379.1816 410.4404 c
379.6992 410.5527 380.1602 410.8203 380.5811 411.2441 c
380.9941 411.668 381.2686 412.2236 381.3955 412.9121 C
382.3154 413.1113 L
382.1006 411.4561 381.5752 410.1309 380.7402 409.1436 c
379.9053 408.1475 378.958 407.5391 377.8906 407.3076 c
377.1758 407.1484 376.4219 407.2021 375.6523 407.4453 c
374.875 407.6963 374.2461 408.1592 373.75 408.835 c
373.2617 409.5029 372.8516 410.6123 372.5166 412.165 c
369.377 426.6284 L
365.9766 425.8877 L
365.8096 426.6597 L
366.5918 427.1958 367.3428 427.9702 368.0713 428.9829 c
368.791 430.0034 369.3809 431.1479 369.8398 432.4331 c
370.0742 433.104 370.3359 434.2998 370.6338 436.02 C
371.3652 436.1797 L
f
0 0 0 0 1 1 1 Xa
1 XR
446.4072 600.8628 m
446.5166 597.1924 447.0078 596.4888 450.416 595.124 C
446.7461 595.0146 446.043 594.5234 444.6777 591.1143 C
444.5684 594.7847 444.0771 595.4883 440.668 596.8535 C
444.3389 596.9624 445.042 597.4541 446.4072 600.8628 C
f
465.458 574.2275 m
466.4932 569.2485 467.333 568.4072 472.3115 567.3687 C
467.332 566.334 466.4912 565.4941 465.4521 560.5156 C
464.418 565.4946 463.5781 566.3354 458.5996 567.3745 C
463.5781 568.4087 464.4199 569.249 465.458 574.2275 C
f
395.9834 564.6436 m
398.9961 559.4629 400.249 558.8354 406.2021 559.5293 C
401.0205 556.5171 400.3936 555.2642 401.0869 549.311 C
398.0752 554.4922 396.8223 555.1196 390.8691 554.4253 C
396.0508 557.438 396.6777 558.6909 395.9834 564.6436 C
f
368.9736 638.0737 m
368.5342 632.0967 369.2139 630.8716 374.5186 628.083 C
368.542 628.5225 367.3164 627.8428 364.5273 622.5376 C
364.9678 628.5146 364.2871 629.7397 358.9824 632.5283 C
364.96 632.0889 366.1846 632.769 368.9736 638.0737 C
f
524.3467 530.9443 m
524.5859 523.0044 525.6504 521.4824 533.0254 518.5332 C
525.0859 518.2939 523.5645 517.2295 520.6143 509.854 C
520.375 517.7939 519.3105 519.3154 511.9355 522.2651 C
519.875 522.5044 521.3975 523.5688 524.3467 530.9443 C
f
176.4492 591.833 m
179.4614 586.6519 180.7144 586.0244 186.6675 586.7188 C
181.4863 583.7065 180.8589 582.4531 181.5527 576.5005 C
178.5405 581.6816 177.2876 582.3086 171.335 581.6147 C
176.5161 584.627 177.1431 585.8804 176.4492 591.833 C
f
75.9048 634.3711 m
76.9395 629.3926 77.7798 628.5518 82.7578 627.5127 C
77.7788 626.478 76.938 625.6377 75.8989 620.6597 C
74.8647 625.6387 74.0244 626.4795 69.0464 627.5186 C
74.0249 628.5527 74.8662 629.3931 75.9048 634.3711 C
f
146.709 606.8125 m
146.7632 603.1416 147.2446 602.4307 150.6318 601.0156 C
146.9609 600.9609 146.25 600.4795 144.835 597.0923 C
144.7803 600.7632 144.2993 601.4741 140.9121 602.8892 C
144.583 602.9438 145.2939 603.4248 146.709 606.8125 C
f
86.6831 564.4614 m
86.2432 558.4844 86.9233 557.2593 92.228 554.4707 C
86.251 554.9102 85.0259 554.23 82.2368 548.9253 C
82.6768 554.9019 81.9966 556.1274 76.6924 558.916 C
82.6689 558.4766 83.894 559.1563 86.6831 564.4614 C
f
212.5986 661.3203 m
214.7891 656.5835 215.8247 655.9385 221.0415 656.0562 C
216.3052 653.8652 215.6597 652.8301 215.7773 647.6133 C
213.5869 652.3496 212.5513 652.9946 207.334 652.877 C
212.0708 655.0674 212.7163 656.103 212.5986 661.3203 C
f
326.708 578.5977 m
329.4951 573.2925 330.7207 572.6128 336.6982 573.0513 C
331.3926 570.2632 330.7129 569.0381 331.1514 563.0615 C
328.3633 568.3662 327.1387 569.0459 321.1611 568.6074 C
326.4658 571.3955 327.1465 572.6206 326.708 578.5977 C
f
532.1152 659.9419 m
531.4834 654.8965 532.0059 653.8291 536.3799 651.2349 C
531.334 651.8672 530.2666 651.3447 527.6719 646.9712 C
528.3047 652.0166 527.7822 653.084 523.4082 655.6782 C
528.4541 655.0459 529.5215 655.5684 532.1152 659.9419 C
f
134.543 542.1812 m
135.0957 537.2207 135.8394 536.3213 140.6079 534.8481 C
135.6475 534.2954 134.748 533.5518 133.2749 528.7832 C
132.7222 533.7437 131.9785 534.6426 127.21 536.1162 C
132.1704 536.6689 133.0698 537.4126 134.543 542.1812 C
f
0.1882 0.1294 0.102 0.0118 0.8 0.8 0.8 Xa
204.7163 178.2979 m
209.4028 177.5645 307.4434 175.3037 335.7012 179.1572 C
369.1436 183.7178 166.583 184.2666 204.7163 178.2979 C
f
*u
0.4275 0.3137 0.2863 0.1294 0.498 0.498 0.498 Xa
321.1152 234.0762 m
320.4297 235.665 319.3291 236.749 317.752 237.5859 c
311.4072 240.9521 302.2275 242.0518 296.123 237.5391 c
293.834 235.8467 293.0942 233.2598 291.7188 230.9316 c
291.0933 229.874 289.8242 229.2969 288.7412 228.8633 C
285.0952 227.4023 281.4966 226.3809 278.8857 223.2178 c
275.8423 219.5313 275.0308 212.9736 274.8843 208.8926 c
274.6138 201.3799 275.0356 192.2051 280.562 186.3379 c
282.1421 184.6592 284.1982 183.8955 286.3872 183.4141 C
301.0029 180.3379 L
302.3799 180.0371 303.8447 179.8857 305.2061 180.3711 c
307.4053 181.1553 309.3682 182.7314 311.7061 183.1221 c
313.5928 183.4365 315.3066 183.0059 317.0156 182.2021 c
318.5527 181.4785 318.9551 181.0049 320.6377 180.9043 C
325.2588 180.627 330.0615 181.2227 334.5918 182.0049 c
336.4443 182.3252 337.7188 182.4082 339.0117 183.4346 C
339.0693 183.502 L
339.084 183.5234 L
339.0791 183.543 L
339.0596 183.6035 L
338.3789 185.0371 336.8584 186.3584 338.084 187.9668 c
338.751 188.8418 340.5098 189.957 340.9502 190.3887 C
343.3613 192.7588 345.5234 195.4111 346.917 198.5225 c
348.1846 201.3555 348.9756 204.627 348.0752 207.6865 c
346.5215 212.9648 341.0049 215.9971 338.8682 221.0225 c
337.5283 224.1738 338.252 227.4375 337.3848 230.6582 c
336.9414 232.3066 335.7949 233.5693 334.0742 233.918 c
330.6299 234.6152 327.126 233.4268 323.7061 232.9854 c
322.8203 232.8711 321.6289 232.79 321.2031 233.7773 c
321.1592 233.8809 321.1299 233.9795 321.1152 234.0762 C
321.1152 234.0762 L
f
323.2969 235.5879 m
323.3984 235.5977 L
324.6699 235.7783 L
329.0361 236.4502 335.6709 238.3828 338.7568 233.8555 c
340.5195 231.2705 340.2236 228.3984 340.502 225.4531 c
341.2275 217.7676 350.2129 214.2324 350.9854 206.5635 c
351.5664 200.7939 348.8125 195.3906 345.2148 191.0674 C
342.7451 188.4658 L
340.3438 186.4951 L
340.4834 186.2568 L
340.9873 185.5332 L
341.6904 184.4248 342.0752 183.0801 341.1846 181.9375 c
340.7695 181.4063 340.0527 180.7402 339.3926 180.5557 C
333.6523 178.9424 327.8018 178.2451 321.8477 178.2168 c
320.2021 178.21 318.6045 178.3945 317.1143 179.1074 c
315.707 179.7803 314.583 180.6182 312.9531 180.6133 c
310.4922 180.6074 308.2012 178.623 305.9746 177.8545 C
302.0225 176.4902 297.0962 178.7012 293.4883 179.4678 c
288.5073 180.5264 282.5327 180.4658 278.7178 184.4609 c
272.583 190.8867 271.9521 200.7129 272.2583 209.0566 c
272.4204 213.4717 273.2856 219.1719 275.7349 223.2832 c
277.5039 226.252 280.2144 228.1162 283.272 229.6094 c
285.1582 230.5313 287.2881 230.8906 289.1001 231.9678 c
289.2358 232.0479 289.4219 232.2002 289.4995 232.3457 C
290.9004 234.9736 291.9653 237.7266 294.4629 239.5791 C
299.4063 243.2441 306.1943 243.6689 312.0645 242.5068 c
315.5234 241.8213 319.4121 240.2324 321.9512 237.6621 c
322.5928 237.0117 322.9629 236.3389 323.2969 235.5879 C
f
*U
0.0196 0.0118 0.0078 0 0.9804 0.9804 0.9804 Xa
321.5625 234.7109 m
320.2402 239.3125 310.9814 241.7178 306.8252 241.5732 c
297.9375 241.2637 293.0278 239.3301 290.019 231.1943 c
288.7773 227.8369 278.041 228.9912 274.9746 217.6982 c
272.0215 206.8193 272.9688 182.9229 287.1841 181.2441 c
293.7095 180.4727 296.1226 179.9404 301.7705 178.7002 C
309.7666 176.9443 310.79 185.3438 318.8779 180.4424 c
321.5967 178.7939 337.2744 181.333 339.7822 182.6973 C
343.9492 184.9648 338.0811 186.8066 340.2188 188.4355 C
346.3848 193.1377 353.6641 204.5635 347.7725 212.4805 c
344.2666 217.1914 338.833 220.8486 338.6396 226.4053 c
338.4424 232.0508 337.6396 236.0605 331.4297 236.2002 c
329.2988 236.248 321.3291 234.0986 321.5625 234.7109 C
f
451.9023 225.0381 m
452.4854 227.3701 457.0889 228.7393 459.1768 228.7393 c
463.6426 228.7393 466.1406 227.8555 467.793 223.8252 c
468.4746 222.1621 473.8418 222.9297 475.5781 217.3164 c
477.251 211.9082 477.1943 199.9004 470.0898 198.8086 c
466.8291 198.3076 465.627 197.998 462.8145 197.2773 C
458.833 196.2559 458.1719 200.4531 454.1992 197.8516 c
452.8643 196.9775 444.9521 197.9766 443.6689 198.6172 C
441.5391 199.6816 444.4512 200.709 443.3506 201.4893 C
440.1738 203.7402 436.3203 209.3477 439.1387 213.4229 c
440.8154 215.8486 443.4775 217.7793 443.4775 220.5713 c
443.4775 223.4072 443.8105 225.4336 446.9238 225.6123 c
447.9932 225.6738 452.0293 224.7354 451.9023 225.0381 C
f
0.2745 0.1922 0.1608 0.0353 0.698 0.698 0.698 Xa
391.0381 182.2236 m
395.9199 179.8066 498.0469 172.3594 527.4814 185.0547 C
562.3184 200.0781 351.3154 201.8857 391.0381 182.2236 C
f
*u
452.3721 223.9883 m
452.7373 224.8359 453.3242 225.4141 454.165 225.8594 c
457.5488 227.6553 462.4434 228.2412 465.6982 225.835 c
466.9189 224.9326 467.3135 223.5527 468.0469 222.3115 c
468.3809 221.7471 469.0576 221.4404 469.6357 221.209 C
471.5791 220.4297 473.498 219.8848 474.8906 218.1982 c
476.5137 216.2324 476.9463 212.7354 477.0244 210.5596 c
477.168 206.5537 476.9434 201.6611 473.9961 198.5322 c
473.1533 197.6367 472.0576 197.2305 470.8896 196.9736 C
463.0957 195.333 L
462.3623 195.1729 461.5811 195.0918 460.8555 195.3506 c
459.6816 195.7686 458.6357 196.6094 457.3887 196.8174 c
456.3828 196.9854 455.4688 196.7549 454.5576 196.3271 c
453.7383 195.9414 453.5234 195.6885 452.626 195.6348 C
450.1621 195.4873 447.6006 195.8047 445.1855 196.2217 c
444.1973 196.3926 443.5176 196.4365 442.8281 196.9844 C
442.7979 197.0205 L
442.79 197.0313 L
442.792 197.042 L
442.8027 197.0742 L
443.166 197.8389 443.9766 198.543 443.3232 199.4004 c
442.9668 199.8672 442.0293 200.4619 441.7949 200.6924 C
440.5088 201.9561 439.3555 203.3701 438.6133 205.0293 c
437.9365 206.54 437.5156 208.2852 437.9951 209.916 c
438.8242 212.7305 441.7656 214.3477 442.9053 217.0273 c
443.6191 218.708 443.2334 220.4482 443.6963 222.166 c
443.9326 223.0449 444.5439 223.7178 445.4609 223.9033 c
447.2979 224.2754 449.166 223.6426 450.9902 223.4063 c
451.4629 223.3457 452.0977 223.3018 452.3242 223.8291 c
452.3486 223.8848 452.3643 223.9365 452.3721 223.9883 C
452.3721 223.9883 L
f
1 D
451.208 224.7949 m
451.1543 224.7998 L
450.4756 224.8965 L
448.1475 225.2549 444.6104 226.2852 442.9639 223.8701 c
442.0244 222.4922 442.1816 220.9609 442.0342 219.3906 c
441.6465 215.292 436.8555 213.4072 436.4434 209.3174 c
436.1338 206.2412 437.6025 203.3594 439.5205 201.0547 C
440.8379 199.667 L
442.1182 198.6162 L
442.0439 198.4893 L
441.7754 198.1035 L
441.4004 197.5117 441.1943 196.7949 441.6699 196.1865 c
441.8916 195.9023 442.2734 195.5479 442.625 195.4492 C
445.6865 194.5889 448.8057 194.2168 451.9805 194.2021 c
452.8584 194.1982 453.7109 194.2969 454.5049 194.6768 c
455.2559 195.0361 455.8545 195.4824 456.7236 195.4805 c
458.0361 195.4766 459.2578 194.418 460.4443 194.0088 C
462.5527 193.2813 465.1797 194.46 467.1035 194.8691 c
469.7588 195.4336 472.9453 195.4014 474.9795 197.5313 c
478.251 200.958 478.5879 206.1973 478.4238 210.6475 c
478.3379 213.002 477.877 216.041 476.5703 218.2334 c
475.627 219.8164 474.1816 220.8105 472.5518 221.6064 c
471.5459 222.0977 470.4092 222.2891 469.4434 222.8643 c
469.3711 222.9072 469.2715 222.9883 469.2305 223.0654 C
468.4834 224.4678 467.916 225.9355 466.584 226.9229 C
463.9482 228.8779 460.3281 229.1035 457.1982 228.4834 c
455.3535 228.1182 453.2793 227.2715 451.9258 225.9004 c
451.584 225.5547 451.3867 225.1953 451.208 224.7949 C
f
*U
0 D
452.1328 224.3271 m
452.8379 226.7803 457.7754 228.0635 459.9922 227.9863 c
464.7305 227.8213 467.3496 226.79 468.9531 222.4521 c
469.6152 220.6611 475.3408 221.2773 476.9756 215.2549 c
478.5508 209.4541 478.0449 196.7109 470.4658 195.8164 c
466.9854 195.4053 465.6982 195.1211 462.6865 194.46 C
458.4238 193.5234 457.8779 198.002 453.5645 195.3887 c
452.1143 194.5098 443.7549 195.8643 442.418 196.5908 C
440.1953 197.7998 443.3242 198.7822 442.1846 199.6504 C
438.8975 202.1582 435.0146 208.251 438.1563 212.4727 c
440.0264 214.9844 442.9238 216.9355 443.0273 219.8975 c
443.1318 222.9082 443.5605 225.0469 446.8711 225.1211 c
448.0078 225.1465 452.2568 224 452.1328 224.3271 C
Bb
0 0 0 0 Bh
1 (GradientFill 2) 453.6846 214.1885 0 28.5957 1 0 0 1 0 0 Bg
28.5957 0 0 -28.5957 453.6846 214.1885 Bm
f
0 BB
*u
0.1882 0.1294 0.102 0.0118 0.8 0.8 0.8 Xa
416.1934 221.4004 m
416.6787 222.5264 417.459 223.2949 418.5762 223.8877 c
423.0723 226.2734 429.5771 227.0518 433.9033 223.8545 c
435.5254 222.6553 436.0498 220.8213 437.0254 219.1719 c
437.4678 218.4219 438.3672 218.0137 439.1348 217.7061 C
441.7188 216.6709 444.2686 215.9473 446.1191 213.7051 c
448.2764 211.0928 448.8516 206.4453 448.9551 203.5547 c
449.1465 198.2305 448.8477 191.7275 444.9316 187.5703 c
443.8115 186.3809 442.3545 185.8398 440.8037 185.499 C
430.4453 183.3184 L
429.4697 183.1055 428.4316 182.998 427.4678 183.3418 c
425.9082 183.8975 424.5176 185.0146 422.8604 185.291 c
421.5234 185.5146 420.3086 185.209 419.0986 184.6396 c
418.0088 184.127 417.7236 183.791 416.5322 183.7197 C
413.2568 183.5244 409.8525 183.9453 406.6426 184.5 c
405.3301 184.7275 404.4268 184.7861 403.5107 185.5127 C
403.4697 185.5605 L
403.46 185.5762 L
403.4629 185.5898 L
403.4766 185.6328 L
403.959 186.6484 405.0371 187.585 404.168 188.7246 c
403.6953 189.3447 402.4492 190.1348 402.1367 190.4414 C
400.4287 192.1201 398.8955 194 397.9092 196.2051 c
397.0098 198.2129 396.4502 200.5313 397.0879 202.6992 c
398.1885 206.4395 402.0986 208.5889 403.6123 212.1504 c
404.5615 214.3828 404.0488 216.6953 404.6641 218.9785 c
404.9785 220.1465 405.79 221.041 407.0098 221.2881 c
409.4502 221.7822 411.9336 220.9404 414.3574 220.627 c
414.9854 220.5469 415.8281 220.4883 416.1309 221.1885 c
416.1621 221.2617 416.1826 221.332 416.1934 221.4004 C
416.1934 221.4004 L
f
1 D
414.6475 222.4717 m
414.5752 222.4785 L
413.6738 222.6064 L
410.5791 223.083 405.8779 224.4521 403.6914 221.2441 c
402.4424 219.4121 402.6514 217.377 402.4541 215.29 c
401.9404 209.8438 395.5732 207.3389 395.0254 201.9033 c
394.6143 197.8154 396.5654 193.9863 399.1143 190.9219 C
400.8652 189.0781 L
402.5664 187.6826 L
402.4678 187.5137 L
402.1113 187 L
401.6123 186.2148 401.3389 185.2617 401.9707 184.4521 c
402.2646 184.0762 402.7734 183.6035 403.2402 183.4727 C
407.3086 182.3301 411.4551 181.835 415.6738 181.8154 c
416.8398 181.8105 417.9727 181.9414 419.0283 182.4473 c
420.0254 182.9238 420.8223 183.5176 421.9775 183.5137 c
423.7207 183.5098 425.3447 182.1035 426.9219 181.5596 C
429.7236 180.5918 433.2139 182.1582 435.7715 182.7021 c
439.3008 183.4521 443.5342 183.4092 446.2383 186.2412 c
450.5859 190.7949 451.0322 197.7578 450.8154 203.6699 c
450.7012 206.7988 450.0879 210.8389 448.3516 213.752 c
447.0986 215.8564 445.1777 217.1768 443.0107 218.2354 c
441.6738 218.8877 440.165 219.1426 438.8799 219.9063 c
438.7842 219.9639 438.6523 220.0703 438.5977 220.1738 C
437.6045 222.0371 436.8496 223.9873 435.0801 225.3008 C
431.5771 227.8975 426.7666 228.1982 422.6074 227.375 c
420.1553 226.8887 417.4004 225.7637 415.6006 223.9414 c
415.1465 223.4805 414.8838 223.0039 414.6475 222.4717 C
f
*U
0 D
415.876 221.8506 m
416.8135 225.1104 423.374 226.8154 426.3203 226.7129 c
432.6182 226.4932 436.0977 225.123 438.2295 219.3584 c
439.1094 216.9795 446.7178 217.7969 448.8906 209.7939 c
450.9834 202.084 450.3125 185.1504 440.2393 183.9609 c
435.6143 183.415 433.9043 183.0371 429.9023 182.1582 C
424.2354 180.9141 423.5098 186.8662 417.7783 183.3926 c
415.8516 182.2256 404.7412 184.0244 402.9648 184.9902 C
400.0117 186.5967 404.1699 187.9023 402.6553 189.0576 C
398.2852 192.3887 393.127 200.4863 397.3018 206.0967 c
399.7871 209.4346 403.6367 212.0273 403.7744 215.9648 c
403.9141 219.9648 404.4834 222.8066 408.8838 222.9063 c
410.3936 222.9395 416.041 221.416 415.876 221.8506 C
Bb
0 0 0 0 Bh
1 (GradientFill 2) 417.9385 208.377 0 38.0015 1 0 0 1 0 0 Bg
38.0015 0 0 -38.0015 417.9385 208.377 Bm
f
0 BB
*u
0.1882 0.1294 0.102 0.0118 0.8 0.8 0.8 Xa
498.6543 227.3818 m
499.4346 228.5068 500.457 229.1738 501.8086 229.5742 c
507.251 231.1885 514.5332 230.6025 518.5547 226.1504 c
520.0635 224.4814 520.2305 222.3613 520.9326 220.3428 c
521.251 219.4248 522.1436 218.7793 522.915 218.2744 C
525.5098 216.5713 528.1377 215.2158 529.6641 212.3574 c
531.4443 209.0254 531.0459 203.8184 530.5205 200.6348 c
529.5527 194.7734 527.7891 187.7314 522.5889 184.0527 c
521.1025 183 519.3896 182.7314 517.6191 182.7012 C
505.8154 182.6074 L
504.7021 182.5898 503.5449 182.7021 502.5664 183.291 c
500.9844 184.2432 499.7119 185.7715 497.9619 186.4404 c
496.5488 186.9795 495.1543 186.9141 493.7051 186.5596 c
492.4004 186.2402 492.0146 185.9355 490.6963 186.1211 C
487.0723 186.6309 483.4453 187.8438 480.0596 189.1602 c
478.6748 189.6982 477.7012 189.9619 476.8604 190.959 C
476.8262 191.0205 L
476.8184 191.0391 L
476.8242 191.0537 L
476.8496 191.0986 L
477.6006 192.1016 478.9863 192.8867 478.2881 194.3242 c
477.9082 195.1064 476.7207 196.2461 476.4473 196.6494 C
474.9512 198.8633 473.6914 201.2559 473.0996 203.8848 c
472.5615 206.2773 472.4609 208.9355 473.6377 211.1641 c
475.668 215.0098 480.416 216.4941 482.8584 220.0518 c
484.3896 222.2832 484.3398 224.9248 485.5166 227.2832 c
486.1182 228.4902 487.2041 229.2891 488.5918 229.29 c
491.3682 229.29 493.8965 227.8213 496.4766 226.9434 c
497.1455 226.7168 498.0547 226.4668 498.54 227.165 c
498.5898 227.2383 498.6279 227.3105 498.6543 227.3818 C
498.6543 227.3818 L
f
1 D
497.2021 228.8955 m
497.124 228.9189 L
496.168 229.2578 L
492.8906 230.4629 488.0547 232.998 484.9541 229.9746 c
483.1846 228.248 482.9639 225.9775 482.2871 223.7402 c
480.5215 217.9004 473.0078 216.5693 471.208 210.75 c
469.8545 206.3721 471.1406 201.7559 473.25 197.8438 C
474.7568 195.4414 L
476.3076 193.5391 L
476.1621 193.376 L
475.6582 192.8936 L
474.9404 192.1455 474.4307 191.1641 474.9424 190.1396 c
475.1807 189.6641 475.6318 189.0361 476.1133 188.7891 C
480.3076 186.6406 484.7305 185.1836 489.3379 184.2295 c
490.6104 183.9658 491.8779 183.8584 493.1436 184.1777 c
494.3389 184.4785 495.3408 184.9512 496.6025 184.6924 c
498.5078 184.3027 499.9717 182.4063 501.5762 181.4629 C
504.4238 179.7861 508.5859 180.7275 511.501 180.7568 c
515.5244 180.7969 520.1426 179.8135 523.7236 182.3105 c
529.4824 186.3271 531.5098 193.8389 532.5801 200.3506 c
533.1455 203.7959 533.3682 208.3467 532.1152 211.915 c
531.21 214.4922 529.4023 216.3604 527.2686 217.9951 c
525.9512 219.0049 524.3574 219.6172 523.1221 220.7354 c
523.0293 220.8193 522.9092 220.9648 522.8721 221.0898 C
522.1992 223.3457 521.8057 225.6445 520.1611 227.4707 C
516.9063 231.084 511.7139 232.4766 506.9854 232.4951 c
504.1982 232.5059 500.9375 231.8848 498.5684 230.291 c
497.9697 229.8877 497.5771 229.4238 497.2021 228.8955 C
f
*U
0 D
498.4072 227.9453 m
500.1523 231.3018 507.7002 231.7148 510.8975 230.9512 c
517.7334 229.3193 521.2334 227.0527 522.29 220.2803 c
522.7256 217.4854 531.2227 216.6973 531.8291 207.4697 c
532.4121 198.5801 527.9355 180.2188 516.6621 181.1445 c
511.4873 181.5693 509.5342 181.5352 504.9658 181.459 C
498.4961 181.3516 499.0195 188.0176 491.9863 185.4883 c
489.6221 184.6377 477.877 189.0596 476.1475 190.5088 C
473.2754 192.918 478.1094 193.4258 476.708 195.0225 C
472.6689 199.6299 468.8193 209.6201 474.623 214.8301 c
478.0771 217.9297 482.8584 219.9121 483.8789 224.1855 c
484.916 228.5273 486.165 231.5078 490.9971 230.6436 c
492.6553 230.3467 498.4922 227.4336 498.4072 227.9453 C
Bb
0 0 0 0 Bh
1 (GradientFill 2) 496.3535 210.708 0 42.5573 1 0 0 1 0 0 Bg
42.5573 0 0 -42.5573 496.3535 210.708 Bm
f
0 BB
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
